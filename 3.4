// Express-kirjasto käyttöön
const express = require('express')
const app = express()

// Kovakoodattu taulukko puhelinluettelosta
let persons = [
  { id: 1, name: 'Arto Hellas', number: '040-123456' },
  { id: 2, name: 'Ada Lovelace', number: '39-44-5323523' },
  { id: 3, name: 'Dan Abramov', number: '12-43-234345' },
  { id: 4, name: 'Mary Poppendieck', number: '39-23-6423122' },
]

// Reitti joka palauttaa kaikki henkilöt JSON-muodossa
app.get('/api/persons', (request, response) => {
  response.json(persons)
})

// Reitti joka palauttaa kaikkki henkilöt HTML-muodossa
app.get('/info', (request, response) => {
  const count = persons.length
  const date = new Date()

  const info = `
    <p>Phonebook has info for ${count} people</p>
    <p>${date}</p>
  `
  response.send(info)
})

// Yksittäisen henkilön haku id:n perusteella
app.get('/api/persons/:id', (request, response) => {
  const id = Number(request.params.id)
  const person = persons.find(p => p.id === id)

  if (person) {
    response.json(person)
  } else {
    response.status(404).end()
  }
})

// henkilön poistaminen id:n perusteella
app.delete('/api/persons/:id', (request, response) => {
  const id = Number(request.params.id)

  // Poistetaan henkilö suodattamalla se pois taulukosta
  persons = persons.filter(person => person.id !== id)

  // Palautetaan statuskoodi 204 no content
  response.status(204).end()
})

// Portti
const PORT = 3001
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})
