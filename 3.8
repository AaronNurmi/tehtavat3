// Express ja Morgan käyttöön
const express = require('express')
const morgan = require('morgan')

const app = express()

// Otetaan käyttöön JSON-runkojen käsittely
app.use(express.json())

// Luodaan Morgan-token joka näyttää POST-pyyntöjen bodyn
morgan.token('body', (req) => {
  // Näytetään vain POST-pyyntöjen body
  return req.method === 'POST' ? JSON.stringify(req.body) : ''
})

// Morganilla loggaaminen
// ':method :url :status :res[content-length] - :response-time ms :body'
// tiny + POST-bodyn lisäys
app.use(morgan(':method :url :status :res[content-length] - :response-time ms :body'))

// Kovakoodattu taulukko puhelinluettelosta
let persons = [
  { id: 1, name: 'Arto Hellas', number: '040-123456' },
  { id: 2, name: 'Ada Lovelace', number: '39-44-5323523' },
  { id: 3, name: 'Dan Abramov', number: '12-43-234345' },
  { id: 4, name: 'Mary Poppendieck', number: '39-23-6423122' },
]

//palautetaan kaikki henkilö
app.get('/api/persons', (req, res) => {
  res.json(persons)
})

// palautetaan HTML-sivu joka kertoo pyyntöhetken sekä henkilöiden määrän
app.get('/info', (req, res) => {
  const count = persons.length
  const date = new Date()
  res.send(`<p>Phonebook has info for ${count} people</p><p>${date}</p>`)
})

// yksittäisen henkilön haku
app.get('/api/persons/:id', (req, res) => {
  const id = Number(req.params.id)
  const person = persons.find(p => p.id === id)

  if (person) {
    res.json(person) // löytyi → palautetaan JSON
  } else {
    res.status(404).end() // ei löytynyt → 404 Not Found
  }
})

// henkilön poistaminen
app.delete('/api/persons/:id', (req, res) => {
  const id = Number(req.params.id)
  persons = persons.filter(p => p.id !== id)
  res.status(204).end() // 204 No Content
})

// uuden henkilön lisääminen
app.post('/api/persons', (req, res) => {
  const body = req.body

  // jos nimi tai numero puuttuu
  if (!body.name || !body.number) {
    return res.status(400).json({ error: 'name or number missing' })
  }

  // jos nimi on jo luettelossa
  const nameExists = persons.some(p => p.name === body.name)
  if (nameExists) {
    return res.status(400).json({ error: 'name must be unique' })
  }

  // jos kaikki on kunnossa niin luodaan uusi henkilö ja id
  const newPerson = {
    id: Math.floor(Math.random() * 1000000), // satunnainen id
    name: body.name,
    number: body.number,
  }

  persons = persons.concat(newPerson) // lisätään taulukkoon
  res.status(201).json(newPerson) // palautetaan lisätty henkilö
})

// Portti
const PORT = 3001
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})
